@inherits NBrightBuy.render.NBrightBuyRazorTokens<NBrightRazor>
@using System.Linq
@using System.Web
@using NBrightDNN
@using Nevoweb.DNN.NBrightBuy.Components;

@AddMetaData("resourcepath", "/DesktopModules/NBright/NBrightBuy/App_LocalResources/")

@AddMetaData("searchpagesize", Model.GetSetting("pagesize"))

@AddMetaData("orderby", "NB3.FromPrice")

@AddMetaData("orderby0", "NB3.ProductRef")
@AddMetaData("orderby1", "NB3.ProductName")
@AddMetaData("orderby2", "NB3.Manufacturer")
@AddMetaData("orderby3", "NB3.FromPrice")
@AddMetaData("orderby4", "NB3.FromPrice DESC")
@AddMetaData("orderby5", "NB3.Qty")

<!-- Product List header -->

<div class="categorybreadcrumbs">@CategoryBreadCrumb(true)</div>

<div class="nbs">

<!-- Show category details -->
<div class="categorydetails">
<h1>@Category("categoryname")</h1>
</div>

<div id="listwrapper" class="productlist">


<!-- Product List Body -->

@foreach (NBrightInfo x in Model.List)
{
    <div class="product" style="width: @(Model.GetSetting("classicitemwidth"))px; height: @(Model.GetSetting("classicitemheight"))px; margin-bottom: @(Model.GetSetting("classicitembottommargin"))px"><!-- Product container -->

        <div class="productimg" style="width: 294px; height: @(Model.GetSetting("classicitemimagecontainerheight"))">

            <div class="productimg-overlay">

                <!-- Add to favorites buttons -->
                @if (Model.GetSetting("enablefavorites") == "True")
                {
                    <span>
                        <a class="wishlistadd" listname="nbsfavorites0" itemid="@(x.ItemID)">@ResourceKey("ProductView.wishlistaddicon-lg")</a>
                        <a class="wishlistremove" listname="nbsfavorites0" itemid="@(x.ItemID)" style="display: none;">@ResourceKey("ProductView.wishlistremoveicon-lg")</a>
                    </span>
                }

                <a href="javascript:void();" class="addtobasket" itemid="@(x.ItemID)">@ResourceKey("ProductView.addtobasketicon-lg")</a>


                <a href="@EntryUrl(x, Model)">@ResourceKey("ProductView.viewicon-lg")</a>
            </div>

            @if (x.GetXmlProperty("genxml/imgs/genxml[1]/hidden/imageurl") != "")
            {
            <div class="image" style="height: @(Model.GetSetting("classicitemimagecontainerheight"))">
                <img title="@(x.GetXmlProperty("genxml/lang/genxml/textbox/txtsummary"))" src="@ProductImage(x, Model.GetSetting("classicthumbnailwidth"), Model.GetSetting("classicthumbnailheight"))">
            </div>
            }
            else
            {
                <div class="noimage" style="height: @(Model.GetSetting("classicitemimagecontainerheight"))">
                    @(Model.GetSettingHtmlOf("noimageicon"))
                </div>
            }

        </div>
        
        <a href="@EditUrl(x,Model)">@ResourceKey("ProductView.editicon")</a>

        <div class="description">
            <h1><a href="@EntryUrl(x,Model)">@ProductName(x)</a></h1>
        </div>
        
        <!-- fields required to send required ajax data to server -->
        <span class="entryid@(x.ItemID)">
            <input id="@(x.ItemID)_productid" type="hidden" value="@(x.ItemID)">                    
        </span>

    </div>
}

<!-- Product List footer -->

</div>

</div>

<!-- return area for ajax data -->
<div id="datareturn" style="display:none;"></div>

<!-- fields required to send required ajax cart to server -->
<span class="minicartdata">
    <input id="carttemplate" type="hidden" value="minicart.cshtml">                    
    <input id="carttheme" type="hidden" value="Classic">                    
</span>

<!-- Masonry Grid http://masonry.desandro.com -->
<script type="text/javascript">

$( document ).ready(function() {

    $('#datareturn').change(function() {
        nbxget('rendercart', '.minicartdata', '.minicart'); // load models
    });

    $('.addtobasket').click(function () {
        nbxget('addtobasket', '.entryid' + $(this).attr('itemid'), '#datareturn'); // load models
    });



    var $container = $('.productlist').masonry({
        columnWidth: @(Model.GetSetting("classicitemwidth")), // List item width - Can also use CSS width of first list item
      itemSelector: '.product',
      gutter: @(Model.GetSetting("classicitemgutter")), // Set horizontal gap and include in calculations. Also used in CSS for vertical gap
      isOriginLeft: true, // Build from right to left if false
      isOriginTop: true, // Build from bottom to top if false
    });


});

// Detect Touch Device
function isTouch() {
 return (('ontouchstart' in window)
      || (navigator.MaxTouchPoints > 0)
      || (navigator.msMaxTouchPoints > 0));
}

if (isTouch()) {
	$('.productimg').addClass("productimgtouch");
}

</script>